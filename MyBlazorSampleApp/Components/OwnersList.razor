@using Entity.Models.EntityModels.Adm;
@using Entity.Repository;

@inject IRepository<AdmOwner> ownerRepository;
<Confirm @ref="DeleteConfirmation" ConfirmationChanged="ConfirmDelete_Click"
         ConfirmationMessage=@($"Вы хотите удалить: {selectedOwner?.Name}?")>
</Confirm>
@if (Owners != null)
{
<table class="w-100 ">
    <thead>
        <tr>
            <th>
                <span style="color:#A5A9AC;font-size:small;">№</span>
            </th>
            <th>
                <span style="color:#A5A9AC;font-size:small;">Название</span>
            </th>
            <th>
                <span style="color:#A5A9AC;font-size:small;">...</span>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var owner in Owners)
        {
            <tr>
                <td>
                    @owner.Id
                </td>
                <td>
                    <a href="javascript: void(0);" @onclick="() => click(owner.Id)">@owner.Name</a>
                </td>
                <td>
                    <a href="javascript: void(0);" @onclick="() => DeleteOwner(owner.Id)" class="text-decoration-none" style=" color: #842029;">
                        <svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" focusable="false" width="0.625em" height="0.625em" preserveAspectRatio="xMidYMid meet" viewBox="0 0 128 128" class="iconify arty-animated" data-icon="arty-animated:16-close" style="vertical-align: -0.125em; transform: rotate(360deg);"><g stroke="currentColor" stroke-width="16" stroke-linecap="round" fill="none" fill-rule="evenodd"><path d="M8 8l112 112" class="animation-delay-0 animation-duration-6 animate-stroke stroke-length-230"></path><path d="M8 120L120 8" class="animation-delay-6 animation-duration-6 animate-stroke stroke-length-230"></path></g></svg>
                    </a>
                </td>
            </tr>
        }
    </tbody>

</table>
}
@code {
    [Parameter]
    public List<AdmOwner> Owners { get; set; }
    [Parameter]
    public EventCallback<AdmOwner> OnOwnerSelect { get; set; }

    protected MyBlazorSampleApp.Components.ConfirmBase DeleteConfirmation { get; set; }
    private AdmOwner selectedOwner;

    protected override async Task OnInitializedAsync()
    {
        await LoadOwners();
    }
    private async Task click(long id)
    {
        selectedOwner = await ownerRepository.GetByIdAsync(id);
        await OnOwnerSelect.InvokeAsync(selectedOwner);

    }
    private async Task DeleteOwner(long id)
    {

        selectedOwner = await ownerRepository.GetByIdAsync(id);
        DeleteConfirmation.Show();
    }

    protected async Task ConfirmDelete_Click(bool deleteConfirmed)
    {
        if (deleteConfirmed)
        {
            await ownerRepository.DeleteAsync(selectedOwner);
            await LoadOwners();
        }
    }

    private async Task LoadOwners()
    {
        Owners = await ownerRepository.GetListAsync();
        Owners = Owners.OrderBy(o => o.Id).ToList();
    }
}
